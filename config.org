#+title: Tucho's Emacs configuration
#+author: Tucho (Marcel Campello)

* Table of contents :toc_4_org:
- [[Ancillary macros and functions][Ancillary macros and functions]]
- [[Tweak user interface][Tweak user interface]]
- [[Line numbering and highlighting][Line numbering and highlighting]]
- [[Text manipulation][Text manipulation]]
- [[Disable auto-save and backup][Disable auto-save and backup]]
- [[Tweak *scratch* buffer][Tweak *scratch* buffer]]
- [[Minibuffer][Minibuffer]]
- [[Configure indentation and tabulation][Configure indentation and tabulation]]
- [[Set coding system][Set coding system]]
- [[Configure package and use-package][Configure package and use-package]]
  - [[Configure package][Configure package]]
  - [[Configure use-package][Configure use-package]]
- [[Org mode][Org mode]]
  - [[General configurattion][General configurattion]]
  - [[Source code block tag expansion][Source code block tag expansion]]
  - [[Enable org bullets][Enable org bullets]]
  - [[Generate table of contents][Generate table of contents]]
- [[Theming][Theming]]
  - [[doom themes][doom themes]]
  - [[doom modeline][doom modeline]]
- [[Usability][Usability]]
  - [[which-key][which-key]]
- [[System integration][System integration]]
  - [[exec-path-from-shell][exec-path-from-shell]]
  - [[pinentry][pinentry]]
  - [[direnv][direnv]]
- [[Version control][Version control]]
  - [[git][git]]
- [[Programming][Programming]]
  - [[Code formatting][Code formatting]]
    - [[smartparens][smartparens]]
    - [[aggressive-indent][aggressive-indent]]
    - [[rainbow-delimitters][rainbow-delimitters]]

* Ancillary macros and functions

Macros to enable and disable modes.
#+begin_src emacs-lisp
  (defmacro set-mode (mode value)
    "Call a '-mode' function with 'value' as its argument, if this function exists."
    `(when (fboundp ',mode)
       (funcall ',mode ,value)))

  (defmacro enable (mode)
    "Call the '-mode' function with 1 as its argument, thus enabling this mode."
    `(set-mode ,mode 1))

  (defmacro disable (mode)
    "Call the '-mode' function with -1 as its argument, thus disabling this mode."
    `(set-mode ,mode -1))
#+end_src

Function to expand a file contained in the Emacs configuration directory.
#+begin_src emacs-lisp
  (defun emacs-d (filename)
    "Expand FILENAME relative to 'user-emacs-directory'."
    (expand-file-name filename user-emacs-directory))
#+end_src

Function to reload the entire Emacs configuration.
#+begin_src emacs-lisp
  (defun reload-emacs-config ()
    "Reload the init.el file, thus 'rerunnig' all the configuration."
    (interactive)
    (load-file (emacs-d "init.el"))
    (message "configuration reloaded"))
#+end_src

* Tweak user interface

Do not show the startup screen.
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

Remove distracting elements.
#+begin_src emacs-lisp
  (disable menu-bar-mode)
  (disable tool-bar-mode)
  (disable scroll-bar-mode)
  (disable horizontal-scroll-bar-mode)
#+end_src

Allow frames to be resized pixelwise.
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
#+end_src

Maximize frame.
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

Configure fonts.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :family "Hurmit Nerd Font Mono"
                      :height 100)
#+end_src

Tooltips config.
#+begin_src emacs-lisp
  (setq use-system-tooltips nil)
#+end_src

* Line numbering and highlighting

Highlight the current line.
#+begin_src emacs-lisp
  (enable global-hl-line-mode)
#+end_src

Show line numbers.
#+begin_src emacs-lisp
  (setq display-line-numbers-width-start t)
  (enable global-display-line-numbers-mode)
#+end_src

Configure mode line to show point's current line and column numbers.
#+begin_src emacs-lisp
  (enable line-number-mode)
  (enable column-number-mode)
#+end_src

* Text manipulation

Enable visual line mode globally ("break" long logical lines into two or more screen lines).
#+begin_src emacs-lisp
  (enable global-visual-line-mode)
#+end_src

* Disable auto-save and backup

Disable auto-save files (those like #filename#).
#+begin_src emacs-lisp
  (setq auto-save-default nil)
  (setq auto-save-list-file-prefix nil)
#+end_src

Disable backup files (those like filename~).
#+begin_src emacs-lisp
  (setq make-backup-files nil)
#+end_src

* Tweak *scratch* buffer

Start with a clean the scratch buffer.
#+begin_src emacs-lisp
  (setq initial-scratch-message nil)
#+end_src

Make the scratch buffer unkillable.
#+begin_src emacs-lisp
  (defun dont-kill-but-bury-scratch ()
    (if (equal (buffer-name (current-buffer))
               "*scratch*")
        (progn
          (bury-buffer)
          nil)
      t))

  (add-hook 'kill-buffer-query-functions 'dont-kill-but-bury-scratch)
#+end_src

* Minibuffer

Support opening new minibuffers from inside existing minibuffers.
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src

Hide commands in M-x which do not work in the current mode.
#+begin_src emacs-lisp
  (setq read-extended-command-predicate #'command-completion-default-include-p)
#+end_src

Do not allow the cursor in the minibuffer prompt
#+begin_src emacs-lisp
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
#+end_src

* Configure indentation and tabulation

Make indentation space-only and tabulation 4-space wide.
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+end_src

* Set coding system

Set UTF-8 as the coding system for:
- newly created buffers;
- subprocess I/O;
- file names;
- terminal;
- keyboard.
#+begin_src emacs-lisp
  (set-default-coding-systems 'utf-8)
#+end_src

* Configure package and use-package

I am going to use ~package~ as the package manager and ~use-package~ for package configuration.

** Configure package

Require ~package~.
#+begin_src emacs-lisp
  (require 'package)
#+end_src

Prevent it from messing with ~init.el~.
#+begin_src emacs-lisp
  (setq package--init-file-ensured t)
  (setq custom-file (emacs-d "custom-file.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

Configure archives.
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (setq package-archive-priorities '(("melpa" . 20)
                                     ("gnu" . 10)))
#+end_src

** Configure use-package

Require and configure ~use-package~. Enable ~always-ensure~ feature.
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))

  (use-package use-package

    :ensure nil)

  (use-package use-package-ensure

    :ensure nil

    :after use-package

    :custom
    (use-package-always-ensure t))
#+end_src

Configure ~bind-key~ (needed to use the ~:bind~ keyword in ~use-package~).
#+begin_src emacs-lisp
  (use-package bind-key

    :ensure nil)
#+end_src

* Org mode

** General configurattion

#+begin_src emacs-lisp
  (use-package org

    :ensure nil

    :hook
    (org-mode . org-indent-mode)

    :custom
    (org-src-window-setup 'current-window)
    (org-special-ctrl-a/e t)
    (org-special-ctrl-k t)
    (org-ctrl-k-protect-subtree t))
#+end_src

** Source code block tag expansion

org-tempo is not a separate package but a module within org that can be enabled. org-tempo allows for '<s' followed by TAB to expand to a begin_src tag. Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
  (use-package org-tempo

    :ensure nil

    :after org)
#+end_src

** Enable org bullets

org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
  (use-package org-bullets

    :hook
    (org-mode . (lambda ()
                  (enable org-bullets-mode))))
#+end_src

** Generate table of contents
#+begin_src emacs-lisp
  (use-package toc-org

    :hook
    (org-mode . toc-org-enable))
#+end_src

* Theming

** doom themes

#+begin_src emacs-lisp
  (use-package doom-themes

    :config
    (doom-themes-visual-bell-config)
    (load-theme 'doom-molokai)

    :custom
    (doom-themes-enable-bold t)
    (doom-themes-enable-italic t))
#+end_src

** doom modeline

#+begin_src emacs-lisp
  (use-package doom-modeline

    :init
    (enable doom-modeline-mode)

    :custom
    (doom-modeline-column-zero-based nil)
    (doom-modeline-position-column-line-format '(" (%l,%c) "))
    (doom-modeline-enable-word-count t))
#+end_src

* Usability

** which-key

#+begin_src emacs-lisp
  (use-package which-key

    :ensure nil

    :init
    (enable which-key-mode)

    :custom
    (which-key-popup-type 'side-window)
    (which-key-side-window-location 'bottom)
    (which-key-sort-order 'which-key-local-then-key-order)
    (which-key-add-column-padding 4)
    (which-key-max-description-length 40)

    :bind
    ("C-c C-SPC" . which-key-show-top-level))
#+end_src

* System integration

** exec-path-from-shell

#+begin_src emacs-lisp
  (use-package exec-path-from-shell

    :config
    (exec-path-from-shell-initialize))
#+end_src

** pinentry

#+begin_src emacs-lisp
  (use-package pinentry

    :custom
    (epg-pinentry-mode 'loopback)

    :config
    (pinentry-start))
#+end_src

** direnv

#+begin_src emacs-lisp
  (use-package direnv

    :config
    (enable direnv-mode))
#+end_src

* Version control

** git

#+begin_src emacs-lisp
  (use-package magit

    :bind
    ("C-x g" . magit)
    ("C-x M-g" . magit-dispatch))
#+end_src

* Programming

** Code formatting

*** smartparens

#+begin_src emacs-lisp
  (use-package smartparens

    :hook
    (prog-mode . smartparens-strict-mode)

    :config
    (require 'smartparens-config)

    :bind
    (:map smartparens-mode-map
          ("C-M-f" . sp-forward-sexp)
          ("C-M-b" . sp-backward-sexp)

          ("C-M-n" . sp-beginning-of-next-sexp)
          ("C-M-S-n" . sp-end-of-next-sexp)
          ("C-M-p" . sp-beginning-of-previous-sexp)
          ("C-M-S-p" . sp-end-of-previous-sexp)

          ("C-M-a" . sp-beginning-of-sexp)
          ("C-M-e" . sp-end-of-sexp)

          ("C-M-<down>" . sp-down-sexp)
          ("C-M-S-<down>" . sp-backward-down-sexp)

          ("C-M-<up>" . sp-backward-up-sexp)
          ("C-M-S-<up>" . sp-up-sexp)

          ("C-M-<space>" . sp-mark-sexp)

          ("C-M-<right>" . sp-forward-slurp-sexp)
          ("C-M-<left>" . sp-backward-slurp-sexp)

          ("C-M-S-<right>" . sp-backward-barf-sexp)
          ("C-M-S-<left>" . sp-forward-barf-sexp)

          ("C-M-]" . sp-unwrap-sexp)
          ("C-M-[" . sp-backward-unwrap-sexp)
          ("C-M-r" . sp-rewrap-sexp)

          ("C-M-j" . sp-join-sexp)
          ("C-M-s" . sp-split-sexp)

          ("C-M-t" . sp-transpose-sexp)

          ("C-M-k" . sp-kill-sexp)
          ("C-M-w" . sp-copy-sexp)
          ("C-M-<backspace>" . sp-backward-delete-sexp)
          ("C-M-<delete>" . sp-delete-sexp)
          ("C-M-d" . sp-delete-sexp)

          ("C-S-f" . sp-forward-symbol)
          ("C-S-b" . sp-backward-symbol)
          ("C-S-k" . sp-kill-symbol)
          ("C-S-<backspace>" . sp-backward-delete-symbol)
          ("C-S-<delete>" . sp-delete-symbol)
          ("C-S-d" . sp-delete-symbol)))
#+end_src

*** aggressive-indent

#+begin_src emacs-lisp
  (use-package aggressive-indent

    :hook
    (prog-mode . aggressive-indent-mode))
#+end_src

*** rainbow-delimitters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters

    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src
